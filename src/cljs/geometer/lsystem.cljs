(ns geometer.lsystem
  (:require [geometer.turtle :as t]))

;; This is an example of a classic string re-writing L-System
;; implemented in terms of geometer's 3D turtle. It's included here
;; for completeness, but I personally find coding directly to the
;; turtle using functions to represent rules and higher order
;; functions (map, reduce, &c) to handle recursion much clearer and
;; more satisfying.
;;
;; See: geometer.turtle/plant for an example.

(defn expand-l-system
  "Recursively expand a L-System grammar into a sequence of operations."
  [rules curr-state depth]
  (if (zero? depth)
    curr-state
    (mapcat #(expand-l-system rules (rules % [%]) (dec depth)) curr-state)))

(defn l-system-to-turtle
  "Convert a series of L-System single-letter rules into a "
  [length-fn angle-fn grow-fn rules]
  (concat [length-fn angle-fn]
          (map #(case %
                  \F grow-fn
                  \f t/tz
                  \C t/center
                  \+ t/ry
                  \- t/ry-
                  \& t/rx
                  \^ t/rx-
                  \\ t/rz
                  \/ t/rz-)
               rules)))

(defn koch
  "Returns a mesh generated by an L-System that produces 3D version of a modified Koch curve."
  []
  (->> (expand-l-system {\F "FF-F-F&F-F-F+F"} "F" 2)
       (l-system-to-turtle (t/length 4) (t/angle 90) t/cylinder)
       t/turtle-mesh))
